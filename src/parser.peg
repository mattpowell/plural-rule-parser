{

  // HELPERS FOR CREATING AST

  function Program(expression) {
    return {
      'type': 'Program',
      'body': [{
        'type': 'ExpressionStatement',
        'expression': expression
      }]
    }
  }

  function Literal(value) {
    return {
      'type': 'Literal',
      'value': value,
      'raw': JSON.stringify(value)
    };
  }

  function Identifier(name) {
   return {
      'type': 'Identifier',
      'name': name
    };
  }

  function Expression(type, operator, left, right) {
    return {
     'type': type || 'Expression',
     'operator': operator,
     'left': left,
     'right': right
    }
  }

  function BinaryExpression(operator, left, right) {
    return Expression('BinaryExpression', operator, left, right)
  }

  function LogicalExpression(operator, left, right) {
    return Expression('LogicalExpression', operator, left, right)
  }

  function ArrayExpression(args) {
    return {
     'type': 'ArrayExpression',
     'elements': [].concat(args).map(function(value) {
        return value && !!value.type ? value : Literal(value);
      })
    };
  }

  function CallExpression(fn, args) {
    return {
      'type': 'CallExpression',
      'callee': {
        'type': 'Identifier',
        'name': fn
      },
      'arguments': args
    }
  }

  function UnaryExpression(expression, operator) {
    return {
      'type': 'UnaryExpression',
      'operator': operator || '!',
      'argument': expression
    }
  }

  // END OF HELPERS

  /**
    Converts an array that looks like ['<expression>', '<boolean condition>', '<expression>'] in
    to a set of BinaryExpressions.
    @param statement pairings of expressions and conditionals.
    @return BinaryExpression
  */
  function handleStatements(statements) {
    var args = [].concat.apply([], statements).filter(function(i) {return i}),
        len = args.length,
        x = 1,
        lastExpr = args[0],
        parts;

    for (; x < len; x += 2) {
      parts = args.slice(x, x + 2);
      if (parts.length === 2) {
        lastExpr = BinaryExpression(parts[0], lastExpr, parts[1]);
      }else {
        throw new Error('ComparisonOperator and value must be provided for BinaryExpression');
      }

    }
    return lastExpr;
  }

  /**
    Builds a binary/logical expression result from range syntax. Range syntax
    looks like: `n in 1,2,3` or `n in 1..3,4..5,6`.
    @param v keyword that is passed in to the generated function, most likely `n`
    @param args array of single numbers or ranges (range is a two index array containing a from number and a to number)
    @return LogicalExpression
  */
  function toRangeStatement(v, args) {
    var lastExpr;

    [].concat(args).forEach(function(arg) {
      var isRange = arg.type === 'ArrayExpression',
          expr;

      if (isRange) {
        expr = LogicalExpression('&&',
          BinaryExpression('>=', v, arg.elements[0]),
          BinaryExpression('<=', v, arg.elements[1])
        );
      }else {
        expr = BinaryExpression('===', v, arg)
      }

      if (!lastExpr) {
        lastExpr = expr;
      }else {
        lastExpr = LogicalExpression('||', lastExpr, expr)
      }

    });

    return lastExpr;
  }

  /**
    Tries to parse an array of strings a number. Falls back to undefined if it's unparseable
    @param digits array of digits
    @return number
  */
  function parseDigits(digits) {
    var num = parseInt([].concat(digits).join(''), 10);
    if (!isNaN(num)) {
      return num;
    }
    return void 0;
  }

  /**
    Glues together the different parts of an expression
    @param left left-side of the expression, usually a Keyword
    @param operator how to glue together the two sides - usually an ComparisonOperator
    @param right right-side of the expression, usually a Value/Number
    @return Expression
  */
  function handleExpression(left, operator, right) {
    var expr;

    // if we're dealing with sets or ranges: n in 1,2,3..6,7..10
    if (operator && operator.type === 'Range') {

      // if we need to operate on integers only (specified by using `within` instead of `in`),
      // convert the variable to one using a bitwise OR
      if (operator.isIntExpected) {
        left = BinaryExpression('|', left, Literal(0));
      }

      // TODO: make optional? Expanding isInRange code to live in the conditional (which is what toRangeStatement does)
      // could lead to larger code size... Could provide an api that makes isInRange available to reduce the size of the parsed rule.
      //expr = CallExpression('isInRange', [left, ArrayExpression(right)]);

      // Expand isInRange
      expr = toRangeStatement(left, right);

      // if there was a not in front, wrap the previous expression in an "negative" Unary
      if (operator.isNegated) {
        expr = UnaryExpression(expr);
      }

    // else if we're dealing with basic expressions like: !==, ===, etc
    }else {
      expr = BinaryExpression(operator, left, right);
    }

    return expr;
  }

}

// n within 0..2 and n is not 2

// create the "program"
start = p:Program { return Program(p); }

// a set of statements returned as the main "program"
Program = statements:Statements { return handleStatements(statements); }

// find expressions joined together by conditions. could (potentially) repeat several times.
Statements = (ComparisonExpression (__ c:LogicalOperator __ { return c })?)*

// find logical operators (&& or ||) wrapped by spaces
Conditional = __ be:LogicalOperator __ { return be; }

// comparison of two expressions
LogicalOperator
  = __ be:(
    "and"i { return '&&' }
    / "or"i { return '||' }
  ) __ { return be; }

// find expressions that when run together return a value (99% of the time will be true or false)
ComparisonExpression
  = (left:Value __
    operator:ComparisonOperator __
    right:Value) { return handleExpression(left, operator, right); }

// comparison between two values via the following operators: ==, !=, within, in
ComparisonOperator
  = ("is not"i / "!=") { return '!==' }
  / ("is"i / "==") { return '===' }
  / not:("not"i __)? w:"with"i?"in"i { return { type: 'Range', isNegated: !!not, isIntExpected: !!w} }

// could be an identifier, literal, or keyword
Value = Set / Mod / Keyword / Number

// a set of Values (ranges or numbers): 1,2,3 or 1,2..4,5
Set = val:(val:(Range / Number) ","* {return val })+ { return val.length === 1 ? val[0] : val } // TODO: figure out why we need the val.length === 1 when: 'n mod 10 is 2 or n in 1,5,7,8,9,10,13..14'

// modulus operator. E.g.: 2 % 10
Mod = left:Keyword __ ("mod" / "%") __ right:Number { return BinaryExpression('%', left, right); }

// the `n` keyword
Keyword = "n" { return Identifier('n') }

// a range of Numbers: 2..10 = 2,3,4,5,6,7,8,9,10
Range = from:Number ".." to:Number { return ArrayExpression([from, to]) }

// (potentially) repeating single numbers. if not parsable, returns undefined.
Number = digits:[0-9]+ { return Literal(parseDigits(digits))}

// whitespace
__ = [ \t\n\r]*